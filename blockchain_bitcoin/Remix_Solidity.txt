-------------------------------------------------------------------------------------------------------------------------------------

* 참조용 홈페이지들 
   . http://dcalt.tk/t/topic/55
   . 

-------------------------------------------------------------------------------------------------------------------------------------

* Remix 링크 : http://remix.ethereum.org/#optimize=false&version=soljson-v0.4.24+commit.e67f0147.js

* 예제 ( Greeter.sol )

pragma solidity ^0.4.18;

contract Greeter {
     function sayHello() public pure returns(string) {
         return "Hello";
     }
 }



-------------------------------------------------------------------------------------------------------------------------------------

* 예제 Greeter_2.sol

pragma solidity ^0.4.18;

contract Greeter_2 {
     string message = "Hello";
     
     function sayHello() public view returns(string) {
         return message;
     }
     
     function changeHello(string _message) public {
         message = _message;
     }
 }

-------------------------------------------------------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------------------------------------------------------

https://medium.com/dnext-post/solidity-tutorial-1-252c9edf2f84


* stringToUint() 함수 : 문자열을 숫자로 변환.

  : uint viewCount = stringToUint(result);

    function __callback(bytes32, string result) public {
         require(msg.sender == oraclize_cbAddress());
         require(!withdrawn);
         
         uint viewCount = stringToUint(result);
         uint amount = viewCount * gweiToPayPerView * 1000000000;
         uint balance = address(this).balance;
         
         if (balance < amount) {
             amount = balance;
         }
         
         beneficiary.transfer(amount);
         withdrawn = true;
    }



-----------------


     function stringToUint(string s) internal pure returns (uint result) {
         bytes memory b = bytes(s);
         uint i;
         result = 0;
         for (i = 0; i < b.length; i++) {
             uint c = uint(b[i]);
             if (c >= 48 && c <= 57) {
                 result = result * 10 + (c - 48);
             }
         }
     }
     
     function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){
         bytes memory _ba = bytes(_a);
         bytes memory _bb = bytes(_b);
         bytes memory _bc = bytes(_c);
         bytes memory _bd = bytes(_d);
         bytes memory _be = bytes(_e);
         string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);
         bytes memory babcde = bytes(abcde);
         uint k = 0;
         for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
         for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];
         for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];
         for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];
         for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];
         return string(babcde);
     }
     
     function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {
         return strConcat(_a, _b, _c, _d, "");
     }
 function strConcat(string _a, string _b, string _c) internal returns (string) {
         return strConcat(_a, _b, _c, "", "");
     }
 function strConcat(string _a, string _b) internal returns (string) {
         return strConcat(_a, _b, "", "", "");
    }



-------------------------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------------------------------------




